# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Fraud Framework Assistant ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á Chapter 5 - MADT7104
fraud_framework_app_code = """
import streamlit as st
import google.generativeai as genai

st.set_page_config(page_title="Fraud Framework Assistant", layout="wide")
st.title("üîç Fraud Strategy Framework Assistant")
st.markdown("AI ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏∏‡∏à‡∏£‡∏¥‡∏ï‡∏à‡∏≤‡∏Å Playbook ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å Chapter 5 - MADT7104")

# Load Gemini API Key
try:
    genai.configure(api_key=st.secrets["AIzaSyANjCc-PtzNhNqq27ow2SnyP1Pl96g0BJ8
 "])
    model = genai.GenerativeModel("gemini-2.0-pro")
except Exception as e:
    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API: {e}")
    st.stop()

# Session state
if "history" not in st.session_state:
    st.session_state.history = []

# Section: Input Problem Description
st.header("1Ô∏è‚É£ ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å Fraud Playbook")
fraud_description = st.text_area("üìù ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏∏‡∏à‡∏£‡∏¥‡∏ï (‡∏à‡∏≤‡∏Å Playbook, Observation ‡∏´‡∏£‡∏∑‡∏≠ Customer Painpoint)")

# Section: Select Focus Dimension
st.header("2Ô∏è‚É£ ‡∏£‡∏∞‡∏ö‡∏∏ Focus Dimensions ‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á MADT7104")
dimensions = st.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
    ["Customer", "Process", "Technology", "Finance", "People"]
)

# Section: Generate IPSO Strategy
if st.button("üöÄ Generate IPSO Framework Summary"):
    if fraud_description:
        with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Framework..."):
            ipso_prompt = f'''
You are a strategy consultant trained in MADT7104 - Chapter 5 (Designing with Data Technologies).
Your job is to help identify IPSO elements (Input, Process, Storage, Output) for a fraud-related case.

Fraud Description:
{fraud_description}

Selected Dimensions: {", ".join(dimensions)}

Please respond in Thai language and follow this structure:
- üéØ Problem Summary:
- üì• Input:
- ‚öôÔ∏è Process:
- üóÇ Storage:
- üì§ Output:
- üß† Suggestion (‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå):
            '''
            try:
                response = model.generate_content(ipso_prompt)
                summary = response.text
                st.markdown(summary)
                st.session_state.history.append(summary)
            except Exception as e:
                st.error(f"‚ö†Ô∏è Error from Gemini: {e}")
    else:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤")

# Section: History
if st.session_state.history:
    with st.expander("üìö ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
        for item in st.session_state.history[::-1]:
            st.markdown("---")
            st.markdown(item)
"""

# Save to file
fraud_app_path = "/mnt/data/fraud_framework_ai_assistant.py"
with open(fraud_app_path, "w", encoding="utf-8") as f:
    f.write(fraud_framework_app_code)

fraud_app_path
